 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/hotels", type: :request do
  # Hotel. As you add validations to Hotel, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      'name' => 'Comfort Inn & Suites Market Ctr',
      'location' => '7138 N Stemmons Fwy, Dallas, TX, 75247',
      'room_types_attributes' => {
        '0' => {
          'name' => 'Single king non-smoking',
          'available' => '1'
        },
        '1' => {
          'name' => 'Double queen ocean view',
          'available' => '1'
        }
      }
    }
  }

  let(:invalid_attributes) {
    {
      'name' => 'Comfort Inn & Suites Market Ctr',
      'location' => '7138 N Stemmons Fwy, Dallas, TX, 75247',
      'room_types_attributes' => {
        '0' => {
          'name' => 'Single king non-smoking',
          'available' => '1'
        },
        '1' => {
          'name' => 'Single king non-smoking',
          'available' => '1'
        }
      }
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Hotel.create! valid_attributes
      get hotels_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      hotel = Hotel.create! valid_attributes
      get hotel_url(hotel)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_hotel_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      hotel = Hotel.create! valid_attributes
      get edit_hotel_url(hotel)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Hotel with room types" do
        expect {
          post hotels_url, params: { hotel: valid_attributes }
        }.to change(Hotel, :count).by(1)
         .and change(RoomType, :count).by(2)
      end

      it "redirects to the created hotel" do
        post hotels_url, params: { hotel: valid_attributes }
        expect(response).to redirect_to(hotel_url(Hotel.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Hotel" do
        expect {
          post hotels_url, params: { hotel: invalid_attributes }
        }.to change(Hotel, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post hotels_url, params: { hotel: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        ->(record) {
          {
            'name' => 'Renaissance Dallas Addison',
            'location' => '15201 Dallas Parkway, Dallas, TX, 75001',
            'room_types_attributes' => {
              '0' => {
                'id' => record.room_types[0].id,
                'name' => 'Single king non-smoking',
                'available' => '0'
              },
              '1' => {
                'id' => record.room_types[1].id,
                '_destroy' => '1'
              },
              '2' => {
                'name' => 'Luxury suite with balcony',
                'available' => '1'
              },
              '3' => {
                'name' => 'Luxury suite with balcony (VIP)',
                'available' => '1'
              }
            }
          }
        }
      }

      it "updates the requested hotel" do
        hotel = Hotel.create! valid_attributes
        new_attrs = new_attributes[hotel]
        patch hotel_url(hotel), params: { hotel: new_attrs }
        hotel.reload

        expect(hotel.name).to be == new_attrs['name']
        expect(hotel.location).to be == new_attrs['location']
        expect(hotel.room_types.size).to be == 3
      end

      it "redirects to the hotel" do
        hotel = Hotel.create! valid_attributes
        patch hotel_url(hotel), params: { hotel: new_attributes[hotel] }
        hotel.reload
        expect(response).to redirect_to(hotel_url(hotel))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        hotel = Hotel.create! valid_attributes
        patch hotel_url(hotel), params: { hotel: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested hotel" do
      hotel = Hotel.create! valid_attributes
      expect {
        delete hotel_url(hotel)
      }.to change(Hotel, :count).by(-1)
    end

    it "redirects to the hotels list" do
      hotel = Hotel.create! valid_attributes
      delete hotel_url(hotel)
      expect(response).to redirect_to(hotels_url)
    end
  end
end
